# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from src.generated import agent_registration_service_pb2 as agent__registration__service__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in agent_registration_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class AgentRegistrationServiceStub(object):
    """Define the service for agent registration
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterAgent = channel.unary_unary(
                '/agent_registration.AgentRegistrationService/RegisterAgent',
                request_serializer=agent__registration__service__pb2.AgentRegistrationRequest.SerializeToString,
                response_deserializer=agent__registration__service__pb2.AgentRegistrationResponse.FromString,
                _registered_method=True)
        self.UnregisterAgent = channel.unary_unary(
                '/agent_registration.AgentRegistrationService/UnregisterAgent',
                request_serializer=agent__registration__service__pb2.AgentUnregistrationRequest.SerializeToString,
                response_deserializer=agent__registration__service__pb2.AgentUnregistrationResponse.FromString,
                _registered_method=True)
        self.SendHeartbeat = channel.unary_unary(
                '/agent_registration.AgentRegistrationService/SendHeartbeat',
                request_serializer=agent__registration__service__pb2.HeartbeatRequest.SerializeToString,
                response_deserializer=agent__registration__service__pb2.HeartbeatResponse.FromString,
                _registered_method=True)
        self.ReceiveCommands = channel.unary_stream(
                '/agent_registration.AgentRegistrationService/ReceiveCommands',
                request_serializer=agent__registration__service__pb2.ReceiveCommandsRequest.SerializeToString,
                response_deserializer=agent__registration__service__pb2.Command.FromString,
                _registered_method=True)
        self.SendCommandResult = channel.unary_unary(
                '/agent_registration.AgentRegistrationService/SendCommandResult',
                request_serializer=agent__registration__service__pb2.CommandResult.SerializeToString,
                response_deserializer=agent__registration__service__pb2.CommandResultResponse.FromString,
                _registered_method=True)


class AgentRegistrationServiceServicer(object):
    """Define the service for agent registration
    """

    def RegisterAgent(self, request, context):
        """Register an agent with the server
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnregisterAgent(self, request, context):
        """Unregister an agent from the server
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendHeartbeat(self, request, context):
        """Send heartbeats to maintain agent connection
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReceiveCommands(self, request, context):
        """Create a stream for agent to receive commands from server
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendCommandResult(self, request, context):
        """Send command results back to server
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AgentRegistrationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterAgent': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterAgent,
                    request_deserializer=agent__registration__service__pb2.AgentRegistrationRequest.FromString,
                    response_serializer=agent__registration__service__pb2.AgentRegistrationResponse.SerializeToString,
            ),
            'UnregisterAgent': grpc.unary_unary_rpc_method_handler(
                    servicer.UnregisterAgent,
                    request_deserializer=agent__registration__service__pb2.AgentUnregistrationRequest.FromString,
                    response_serializer=agent__registration__service__pb2.AgentUnregistrationResponse.SerializeToString,
            ),
            'SendHeartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.SendHeartbeat,
                    request_deserializer=agent__registration__service__pb2.HeartbeatRequest.FromString,
                    response_serializer=agent__registration__service__pb2.HeartbeatResponse.SerializeToString,
            ),
            'ReceiveCommands': grpc.unary_stream_rpc_method_handler(
                    servicer.ReceiveCommands,
                    request_deserializer=agent__registration__service__pb2.ReceiveCommandsRequest.FromString,
                    response_serializer=agent__registration__service__pb2.Command.SerializeToString,
            ),
            'SendCommandResult': grpc.unary_unary_rpc_method_handler(
                    servicer.SendCommandResult,
                    request_deserializer=agent__registration__service__pb2.CommandResult.FromString,
                    response_serializer=agent__registration__service__pb2.CommandResultResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'agent_registration.AgentRegistrationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('agent_registration.AgentRegistrationService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AgentRegistrationService(object):
    """Define the service for agent registration
    """

    @staticmethod
    def RegisterAgent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/agent_registration.AgentRegistrationService/RegisterAgent',
            agent__registration__service__pb2.AgentRegistrationRequest.SerializeToString,
            agent__registration__service__pb2.AgentRegistrationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UnregisterAgent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/agent_registration.AgentRegistrationService/UnregisterAgent',
            agent__registration__service__pb2.AgentUnregistrationRequest.SerializeToString,
            agent__registration__service__pb2.AgentUnregistrationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendHeartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/agent_registration.AgentRegistrationService/SendHeartbeat',
            agent__registration__service__pb2.HeartbeatRequest.SerializeToString,
            agent__registration__service__pb2.HeartbeatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReceiveCommands(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/agent_registration.AgentRegistrationService/ReceiveCommands',
            agent__registration__service__pb2.ReceiveCommandsRequest.SerializeToString,
            agent__registration__service__pb2.Command.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendCommandResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/agent_registration.AgentRegistrationService/SendCommandResult',
            agent__registration__service__pb2.CommandResult.SerializeToString,
            agent__registration__service__pb2.CommandResultResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
